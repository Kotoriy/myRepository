<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean的作用范围调整
    bean标签的scope属性：
        作用：用于指定bean的作用范围
        取值： 常用的就是单例的和多例的
            singleton：单例的（默认值）
            prototype：多例的
            request：作用于web应用的请求范围
            session：作用于web应用的会话范围
            global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session
    -->

    <bean id="accountDao" class="com.xjz.dao.impl.AccountDaoImpl"></bean>


    <bean id="birthday" class="java.util.Date"></bean>
    <!-- bean对象的生命周期
                单例对象
                    出生：当容器创建时对象出生
                    活着：只要容器还在，对象一直活着
                    死亡：容器销毁，对象消亡
                    总结：单例对象的生命周期和容器相同
                多例对象
                    出生：当我们使用对象时spring框架为我们创建
                    活着：对象只要是在使用过程中就一直活着。
                    死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
                    总结：多例对象的声明周期和对象是否被使用有关
                -->

    <!--构造方法实例化bean-->
    <bean id="accountService" class="com.xjz.service.impl.AccountServiceImpl" scope="singleton" init-method="init" destroy-method="destroy">
        <!--构造方法注入-->
        <!--构造函数注入：
            使用的标签:constructor-arg
            标签出现的位置：bean标签的内部
            标签中的属性
                type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
                name：用于指定给构造函数中指定名称的参数赋值                                        常用的
                =============以上三个用于指定给构造函数中哪个参数赋值===============================
                value：用于提供基本类型和String类型的数据
                ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象

            优势：
                在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
            弊端：
                改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
        -->
        <!--<constructor-arg name="name" value="小鱿不可爱"></constructor-arg>-->
        <!--<constructor-arg name="age" value="18"></constructor-arg>-->
        <!--<constructor-arg name="birthday" ref="birthday"></constructor-arg>-->

        <!--set方法注入-->
        <property name="name" value="小鱿不可爱"></property>
        <property name="age" value="18"></property>
        <property name="birthday" ref="birthday"></property>
        <!--数组、list、set通用-->
        <property name="list">
            <list>
                <value>小鱿不可爱</value>
                <value>18</value>
                <ref bean="birthday"></ref>
            </list>
        </property>
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <!--静态工厂实例化bean，第三方提供的类，无法对构造函数进行修改时使用-->
    <!--<bean id="accountService" class="com.xjz.factory.StaticFactory" factory-method="getAccountService"></bean>-->

    <!--实例工厂实例化bean-->
    <!--<bean id="instanceFactory" class="com.xjz.factory.InstanceFactory"></bean>-->
    <!--<bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->


</beans>